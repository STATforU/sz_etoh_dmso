---
title: "Progressive motility"
author: "Marie Bisconti, Philippe Grosjean & Elise Hennebert"
format: pdf
editor: visual
---

## Introduction

The effect of DMSO and ethanol is evaluated at concentrations from 0 up to 2% on spermatozoa progressive motility.

```{r setup, include=FALSE}
library(lme4)
library(ggplot2)
theme_set(theme_bw())
# Also using readxl, skimr, equatiomatic, optimix, dfoptim, boot
# Read functions for residual analysis plots
```

## DMSO

```{r}
mp_dmso <- readxl::read_excel("../data/Table S2.xlsx",
  sheet = "progressive motility_DMSO")
mp_dmso$donor <- as.factor(mp_dmso$donor)
names(mp_dmso) <- c("donor", "conc", "prog", "total")
mp_dmso$prog_frac <- mp_dmso$prog / mp_dmso$total
skimr::skim(mp_dmso)
```

There are eight donors, no missing data.

```{r}
table(mp_dmso$donor, as.factor(mp_dmso$conc))
```

The data are balanced with one observation for each concentration and each donor and no missing data.

```{r}
mp_dmso_m1 <- glmer(cbind(prog, total - prog) ~ conc + (conc | donor),
  data = mp_dmso, family = binomial(link = "logit"))
summary(mp_dmso_m1)
```

The model is:

`r equatiomatic::extract_eq(mp_dmso_m1)`

Here is a plot of this model:

```{r}
ggplot(data = mp_dmso) +
  geom_jitter(aes(x = conc, y = prog_frac * 100, col = donor),
    width = 0.01) +
  geom_line(aes(x = conc, y = fitted(mp_dmso_m1) * 100, col = donor)) +
  labs(x = "[DMSO] (%)", y = "Progressive motility (%)")
```

Here, we have all negative slopes. Data are rather widespread. There are definitely shifts in the intercept per donor (different motility at \[DMSO\] = 0). Slopes seems different between donors. There is an extreme point for donor 1, DMSO 0.5%. Let's check if the model can be simplified with a likelihood ratio test:

```{r}
mp_dmso_m2 <- glmer(cbind(prog, total - prog) ~ conc  + (1 | donor),
  data = mp_dmso, family = binomial(link = "logit"))
anova(mp_dmso_m1, mp_dmso_m2, refit = FALSE) # Despite the name, it is indeed a LR test
```

The likelihood ratio does not detect significant differences between the full and simplified models at $\alpha$ = 5%. We could use the simplest `mp_dmso_m2` model with only a shift in the slope per donor.

This model is:

`r equatiomatic::extract_eq(mp_dmso_m2)`

Here is a plot of this model:

```{r}
ggplot(data = mp_dmso) +
  geom_jitter(aes(x = conc, y = prog_frac * 100, col = donor),
    width = 0.01) +
  geom_line(aes(x = conc, y = fitted(mp_dmso_m2) * 100, col = donor)) +
  labs(x = "[DMSO] (%)", y = "Progressive motility (%)")
```

```{r}
summary(mp_dmso_m2)
```

The Z test indicates that `conc` is significantly different from zero at $\alpha$ = 5%. However, it is not the best test in the case of a mixed model like here. We prefer to rely on the 95% confidence interval calculated either on the profile, or via parametric bootstrap (and especially the later one):

```{r}
confint(mp_dmso_m2, level = 0.95) # 95% CI based on profile
set.seed(964)
# 1000x parameter bootstrap
(mp_dmso_m2_conf <- confint(mp_dmso_m2, level = 0.95, method = "boot", nsim  = 1000L))
```

Among the 1000 bootstrapped models, two are singular. We can ignore this warning, since this impact is probably negligible on the overall calculations. Slope for `conc` is significantly different from zero at $\alpha$ = 5% because the 95% CI does not contain zero.

### Additional verifications

We could double-check the significance of the slope `conc` by looking at a likelihood ratio test when dropping `conc` from the model:

```{r}
#drop1(mp_dmso_m2, scope = "conc")
mp_dmso_m3 <- glmer(cbind(prog, total - prog) ~ 1 + (1 | donor),
  data = mp_dmso, family = binomial(link = "logit"))
anova(mp_dmso_m2, mp_dmso_m3, refit = TRUE)
```

The model with `conc` is significantly different at $\alpha$ level 5% from a reference model that sets the slope `conc` = 0. There is thus a significant effect of DMSO concentration (confirmation of results obtained from 95% CI).

We also double-check convergence of the model by trying different optimisation engines (just to make sure). First, is there a singularity in the model?

```{r}
isSingular(mp_dmso_m2)
```

... then, a report about the model convergence:

```{r}
mp_dmso_m2_all <- allFit(mp_dmso_m2)
summary(mp_dmso_m2_all)
```

### Analysis of the residuals

Let's check how the residuals distribute and if there is homoscedasticity.

```{r}
mp_dmso <- fortify.merMod(mp_dmso_m2)
ggplot(data = mp_dmso, aes(x = .fitted, y = .scresid, col = donor)) +
  geom_point() +
  geom_hline(yintercept = 0) +
  labs(x = "Fitted values", y = "Pearson's residuals")
```

There is one extreme value, but otherwise, residuals are correctly distributed. Linearity is good here.

```{r}
ggplot(data = mp_dmso, aes(x = .fitted, y = sqrt(abs(.scresid)))) +
  geom_point() +
  geom_smooth(method = "loess", formula = y ~ x) +
  geom_hline(yintercept = 0) +
  labs(x = "Fitted values", y = "(|Pearson's residuals|)^.5")
```

Homoscedasticity of the residuals seems here acceptable (the blue curve that is a loess smoothing in the data is relatively horizontal). Of course, the extreme value impacts the loess curve locally, but otherwise the variance in the residuals is homogeneous along fitted values.

Note: according to Gauss-Markov theorem that indicates that linearity, random sample, non-collinearity between predictors, non-correlation between predictors and error term and homoscedasticity are the only requirements for our GLMM, we do not have to check it. Also the model is robust to departure of Normality, and none of the tests we made depend on a Normal distribution of the residuals (we said we don't trust z/t tests and replace them by likelihood ratio tests and parameterized bootstrapped confidence intervals). However, for completeness, here is the quantile-quantile plot of the residuals:

```{r}
ggplot(data = mp_dmso, aes(sample = .scresid)) +
  geom_qq() +
  geom_qq_line() +
  labs(x = "Theoretical quantiles", y = "Pearson's residuals")
```

It appears to be excellent, except for our extreme value, of course. A Shapiro-Wilk test does not confirm Normality, but we are pretty sure it is caused by the extreme value when looking at the quantile-quantile plot:

```{r}
shapiro.test(mp_dmso$.scresid)
```

## Predictions

The model allows to calculate the drop in progressive motility according to DMSO concentration from 0 to 2%. Note that an inverse logit transformation is required. Here is an example:

```{r}
mp_dmso_slope <- c(
  ci95_min   = min(mp_dmso_m2_conf["conc", ]),
  estimate = fixef(mp_dmso_m2)[["conc"]],
  ci95_max  = max(mp_dmso_m2_conf["conc", ]))
mp_dmso_slope
#saveRDS(mp_dmso_slope, "../data/motility_prog_DMSO_slope.rds")
```

Let's say we want to calculate the drop in progressive motility for various DMSO concentrations between 0 and 2% if the progressive motility of a sample without DMSO is 70%. The calculation is:

```{r}
predict_logit <- function(conc, intercept = 1, slopes) {
  slopes_mat <- matrix(slopes, nrow = 1,
    dimnames = list(NULL, names(slopes)))
  data.frame(conc = conc, -intercept +
      boot::inv.logit(boot::logit(intercept) +
      conc %*% slopes_mat))
}
dmso_conc <- (0:20) / 10
mp_dmso_lost <- predict_logit(dmso_conc, 0.7, mp_dmso_slope)
mp_dmso_lost
#saveRDS(mp_dmso_lost, "../data/motility_prog_DMSO_lost.rds")
```

This is the lost in progressive motility that the model predicts.

## Ethanol

```{r}
mp_etoh <- readxl::read_excel("../data/Table S2.xlsx",
  sheet = "progressive motility_EtOH")
mp_etoh$donor <- as.factor(mp_etoh$donor)
names(mp_etoh) <- c("donor", "conc", "prog", "total")
mp_etoh$prog_frac <- mp_etoh$prog / mp_etoh$total
skimr::skim(mp_etoh)
```

There are also the same eight donors, no missing data.

```{r}
table(mp_etoh$donor, as.factor(mp_etoh$conc))
```

The data are balanced with one observation for each concentration and each donor and no missing data.

```{r}
mp_etoh_m1 <- glmer(cbind(prog, total - prog) ~ conc + (conc | donor),
  data = mp_etoh, family = binomial(link = "logit"))
summary(mp_etoh_m1)
```

The model is:

`r equatiomatic::extract_eq(mp_etoh_m1)`

Here is a plot of this model:

```{r}
ggplot(data = mp_etoh) +
  geom_jitter(aes(x = conc, y = prog_frac * 100, col = donor),
    width = 0.01) +
  geom_line(aes(x = conc, y = fitted(mp_etoh_m1) * 100, col = donor)) +
  labs(x = "[ethanol] (%)", y = "Progressive motility (%)")
```

Slopes are all negative, suggesting a negative concentration effect. Data are rather widespread. There are definitely shifts in the intercept per donor (different motility at \[etoh\] = 0). Slopes seems very similar between donors. Let's check if the model can be simplified using a likelihood ratio test:

```{r}
mp_etoh_m2 <- glmer(cbind(prog, total - prog) ~ conc  + (1 | donor),
  data = mp_etoh, family = binomial(link = "logit"))
anova(mp_etoh_m1, mp_etoh_m2, refit = FALSE) # Despite the name, it is indeed a LR test
```

The likelihood ratio test does not detects significant differences between the full and simplified models at $\alpha$ = 5%. We could thus use the simplest `mp_etoh_m2` model with only a shift in the slope per donor. This model is:

`r equatiomatic::extract_eq(mp_etoh_m2)`

Here is a plot of this model:

```{r}
ggplot(data = mp_etoh) +
  geom_jitter(aes(x = conc, y = prog_frac * 100, col = donor),
    width = 0.01) +
  geom_line(aes(x = conc, y = fitted(mp_etoh_m2) * 100, col = donor)) +
  labs(x = "[ethanol] (%)", y = "Progressive motility (%)")
```

```{r}
summary(mp_etoh_m2)
```

The Z test indicates that `conc` is significantly different from zero at $\alpha$ = 5%. However, it is not the best test in the case of a mixed model like here. We prefer to rely on the 95% confidence interval calculated either on the profile, or via parametric bootstrap (and especially the later one):

```{r}
confint(mp_etoh_m2, level = 0.95) # 95% CI based on profile
set.seed(2784)
# 1000x parameter bootstrap
(mp_etoh_m2_conf <- confint(mp_etoh_m2, level = 0.95,
  method = "boot", nsim  = 1000L))
```

We had one model with singularity among the 1000, not a big problem (we may ignore this warning). Slope for `conc` is significantly different from zero at $\alpha$ = 5% because the 95% CI does not contain zero.

### Additional verifications

We could double-check the significance of the slope `conc` by looking at a likelihood ratio test when dropping `conc` from the model:

```{r}
#drop1(mp_etoh_m2, scope = "conc")
mp_etoh_m3 <- glmer(cbind(prog, total - prog) ~ 1 + (1 | donor),
  data = mp_etoh, family = binomial(link = "logit"))
anova(mp_etoh_m2, mp_etoh_m3, refit = FALSE)
```

The model with `conc` is significantly different at $\alpha$ level 5% from a reference model that sets the slope `conc` = 0. There is thus a significant effect of ethanol concentration (confirmation of results obtained from 95% CI).

We also double-check convergence of the model by trying different optimisation engines (just to make sure). First, is there a singularity in the model?

```{r}
isSingular(mp_etoh_m2)
```

... then, a report about the model convergence:

```{r}
mp_etoh_m2_all <- allFit(mp_etoh_m2)
summary(mp_etoh_m2_all)
```

### Analysis of the residuals

Let's check how the residuals distribute and if there is homoscedasticity.

```{r}
mp_etoh <- fortify.merMod(mp_etoh_m2)
ggplot(data = mp_etoh, aes(x = .fitted, y = .scresid, col = donor)) +
  geom_point() +
  geom_hline(yintercept = 0) +
  labs(x = "Fitted values", y = "Pearson's residuals")
```

There is one extreme value, but otherwise, residuals seem rather correctly distributed. Linearity is good here.

```{r}
ggplot(data = mp_etoh, aes(x = .fitted, y = sqrt(abs(.scresid)))) +
  geom_point() +
  geom_smooth(method = "loess", formula = y ~ x) +
  geom_hline(yintercept = 0) +
  labs(x = "Fitted values", y = "(|Pearson's residuals|)^.5")
```

Homoscedasticity of the residuals seems here acceptable (the blue curve that is a loess smoothing in the data is relatively horizontal).

With the same remark as for DMSO, here is the quantile-quantile plot of the residuals:

```{r}
ggplot(data = mp_etoh, aes(sample = .scresid)) +
  geom_qq() +
  geom_qq_line() +
  labs(x = "Theoretical quantiles", y = "Pearson's residuals")
```

It appears not Normal for. A Shapiro-Wilk test confirms non Normality:

```{r}
shapiro.test(mp_etoh$.scresid)
```

### Predictions

The model allows to calculate the drop in progressive motility according to ethanol concentration from 0 to 2%. Note that an inverse logit transformation is required. Here is an example:

```{r}
mp_etoh_slope <- c(
  ci95_min   = min(mp_etoh_m2_conf["conc", ]),
  estimate = fixef(mp_etoh_m2)[["conc"]],
  ci95_max  = max(mp_etoh_m2_conf["conc", ]))
mp_etoh_slope
#saveRDS(mp_etoh_slope, "../data/motility_prog_ETOH_slope.rds")
```

Let's say we want to calculate the drop in progressive motility for various ethanol concentrations between 0 and 2% if the progressive motility in a sample without ethanol is 70%. The calculation is:

```{r}
predict_logit <- function(conc, intercept = 1, slopes) {
  slopes_mat <- matrix(slopes, nrow = 1,
    dimnames = list(NULL, names(slopes)))
  data.frame(conc = conc, -intercept +
    boot::inv.logit(boot::logit(intercept) +
    conc %*% slopes_mat))
}
etoh_conc <- (0:20) / 10
mp_etoh_lost <- predict_logit(etoh_conc, 0.7, mp_etoh_slope)
mp_etoh_lost
#saveRDS(mp_etoh_lost, "../data/motility_prog_ETOH_lost.rds")
```

This is the lost in progressive motility that the model predicts.

## General informations

```{r}
sessionInfo()
```
